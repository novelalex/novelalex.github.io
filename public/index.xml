<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>novel&#39;s site</title>
    <link>https://novelalex.com/</link>
    <description>Recent content on novel&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>novelalex29@outlook.com (Novel Alex)</managingEditor>
    <webMaster>novelalex29@outlook.com (Novel Alex)</webMaster>
    <copyright>Â© 2024 Novel Alex</copyright>
    <lastBuildDate>Wed, 11 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://novelalex.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>an attempt at a visual novel engine</title>
      <link>https://novelalex.com/an_attempt_at_a_vn_engine/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><author>novelalex29@outlook.com (Novel Alex)</author>
      <guid>https://novelalex.com/an_attempt_at_a_vn_engine/</guid>
      <description>[WIP]
A visual novel is a type of game, where you read a lot of text, and (optionally) interact with things.
There are also visuals.
There are supposed to be visuals.
More on that later&amp;hellip;
I wanted to create a way for non-programmers to create visual novels by writing a simple script, with a syntax that can be read by anyone.
I needed a Domain Specific Language or DSL for short, a DSL is a special kind of language that is kind of like a regular programming language but its made to do a specific task.</description>
      <content:encoded><![CDATA[<p>[WIP]</p>
<p>A visual novel is a type of game, where you read a lot of text, and (optionally) interact with things.</p>
<p>There are also visuals.</p>
<p>There are supposed to be visuals.</p>
<p>More on that later&hellip;</p>
<p>I wanted to create a way for non-programmers to create visual novels by writing a simple script, with a syntax that can be read by anyone.</p>
<p>I needed a Domain Specific Language or DSL for short, a DSL is a special kind of language that is kind of like a regular programming language but its made to do a specific task.</p>
<p>For example, Python is a general purpose programming language. It can be used to build almost any software you could think of. On the other hand, Unreal blueprints are a good example of a DSL. It was designed to build logic for video games made inside of Unreal Engine.</p>
<p>I was considering my options, I could write a custom interpreter, or I could try to use Jetbrains MPS as a platform to create my DSL, but I had another option in mind.</p>
<p>At the time, I was messing around with a language called Ruby, which was flexible enough for me to define my own syntax. Ruby is well a well known language that is used widely&hellip; for web development. Not a lot of folks are using Ruby as an embedded scripting language for games, because although Ruby is a wonderful language to work in, it&rsquo;s not the fastest.</p>
<p>But I was in a unique situation, because unlike most game engines that need their scripts to run at least once every 16 milliseconds, I only needed the script to be run once(kinda) at the beginning of the program.</p>
<p>I was ready to use Ruby and C++ to build the engine, before making a graphical application using SDL, I decided to get a text based prototype working in the terminal.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#828b96;font-style:italic">#include</span> <span style="color:#828b96;font-style:italic">&lt;mruby.h&gt;</span><span style="color:#828b96;font-style:italic">   </span></span></span></code></pre></div>
<p>The DSL is using a feature of Ruby called blocks. Blocks are pieces of code that can be given to a function as input, they can be stored for later use. Ruby&rsquo;s syntax for these functions mimics some features of the language and makes it seem as if they were part of the language.</p>
<p>This is what the syntax for writing stories looks like:</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#58a1dd">character</span> <span style="color:#a6be9d">:wizard</span>, <span style="color:#a6be9d">&#34;Wizzo the Wizard&#34;</span>, <span style="color:#a6be9d">:blue</span>
</span></span><span style="display:flex;"><span><span style="color:#58a1dd">character</span> <span style="color:#a6be9d">:tarnished</span>, <span style="color:#a6be9d">&#34;Tarnished&#34;</span>, <span style="color:#a6be9d">:green</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#58a1dd">scene</span> <span style="color:#a6be9d">:start</span> <span style="color:#ff636f">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#58a1dd">description</span> <span style="color:#a6be9d">&#34;You are at a crossroad in a forest.&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#58a1dd">dialogue</span> <span style="color:#a6be9d">:tarnished</span>, <span style="color:#a6be9d">&#34;Which path should I take?&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#58a1dd">choice</span> <span style="color:#a6be9d">&#34;Take the left path&#34;</span>, <span style="color:#a6be9d">:left_path</span>
</span></span><span style="display:flex;"><span>  <span style="color:#58a1dd">choice</span> <span style="color:#a6be9d">&#34;Take the right path&#34;</span>, <span style="color:#a6be9d">:right_path</span>
</span></span><span style="display:flex;"><span>  <span style="color:#58a1dd">choice</span> <span style="color:#a6be9d">&#34;Take the cookie path&#34;</span>, <span style="color:#a6be9d">:cookie_path</span>
</span></span><span style="display:flex;"><span><span style="color:#ff636f">end</span></span></span></code></pre></div>
<p>A scene holds a timeline, which is just an array. The timeline contains each description or dialog that appears in order from top to bottom.</p>
<p>The timeline for the <code>:start</code> scene would look like:</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#ff636f">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6be9d">&#34;You are at a crossroad in a forest.&#34;</span>,
</span></span><span style="display:flex;"><span>     {
</span></span><span style="display:flex;"><span>        <span style="color:#a6be9d">character</span>: <span style="color:#a6be9d">:tarnished</span>, 
</span></span><span style="display:flex;"><span>        <span style="color:#a6be9d">text</span>: <span style="color:#a6be9d">&#34;Which path should I take?&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#ff636f">]</span></span></span></code></pre></div>
]]></content:encoded>
    </item>
    <item>
      <title>a list of articles and quotes i like</title>
      <link>https://novelalex.com/list_of_really_good_quotes/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate><author>novelalex29@outlook.com (Novel Alex)</author>
      <guid>https://novelalex.com/list_of_really_good_quotes/</guid>
      <description>&amp;ldquo;complexity very, very bad&amp;rdquo; - Carson Gross, The Grug Brained Developer
&amp;ldquo;People&amp;rsquo;s dreams never end!&amp;rdquo; - Marshall D. Teach, One Piece</description>
      <content:encoded><![CDATA[<ul>
<li>
<p>&ldquo;complexity very, very bad&rdquo; <br>
<em>- Carson Gross, <a href="https://grugbrain.dev/">The Grug Brained Developer</a></em></p>
</li>
<li>
<p>&ldquo;People&rsquo;s dreams never end!&rdquo; <br>
<em>- Marshall D. Teach, One Piece</em></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>making spritesheets quickly</title>
      <link>https://novelalex.com/making_spritesheets_quickly/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate><author>novelalex29@outlook.com (Novel Alex)</author>
      <guid>https://novelalex.com/making_spritesheets_quickly/</guid>
      <description>Me and my friend started working on a game recently, where he is working on the art, and I am doing the programming. Our general workflow for putting an animation into Godot looks like this: He exports an image sequence from Animate and sends it to me, I then import those images into Aseprite as an animation then I export this animation as a sprite sheet and then finally import in into Godot.</description>
      <content:encoded><![CDATA[<p>Me and my friend started working on a game recently, where he is working on the art, and I am doing the programming. Our
general workflow for putting an animation into Godot looks like this: He exports an image sequence from Animate and sends
it to me, I then import those images into Aseprite as an animation then I export this animation as a sprite sheet and then
finally import in into Godot.</p>
<p>
<img src="grimIdle.png" alt="The output sprite sheet">
</p>
<hr>
<p>
<figure>
    <img src="grim_idle.gif" alt="Grim Discount: A discount version of the grim reaper">
    <figcaption>Animation By Pictoco</figcaption>
</figure>
</p>
<p>I want to be able to automate the whole Aseprite step, I want a program I can drag an image sequence into and have it
spit out a sprite sheet.</p>
<p>I&rsquo;ve had the <a href="https://tauri.app/">Tauri</a> framework on my radar for a while now, and now I have a reason to play around
with it. It lets me write the frontend of the app in html/css/js and the backend in Rust.</p>
<p>I can register a file drop event and print out what happens when some files are dragged in.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#828b96;font-style:italic">// main.ts
</span></span></span><span style="display:flex;"><span><span style="color:#828b96;font-style:italic"></span><span style="color:#ff636f">import</span> { <span style="color:#58a1dd">listen</span> } <span style="color:#ff636f">from</span> <span style="color:#a6be9d">&#39;@tauri-apps/api/event&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#58a1dd">listen</span>(<span style="color:#a6be9d">&#39;tauri://file-drop&#39;</span>, <span style="color:#58a1dd">event</span> <span style="color:#ff636f">=&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#58a1dd">console</span>.<span style="color:#58a1dd">log</span>(<span style="color:#58a1dd">event</span>)
</span></span><span style="display:flex;"><span>})</span></span></code></pre></div>
<p>When I drag a file into the window, I can access the paths:</p>
<p>
<img src="filedrag.gif" alt="A demonstration of file drag and drop">
</p>
<p>I&rsquo;ll need a way to send these paths to my rust code, I can do that by creating a Tauri command</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#828b96;font-style:italic">// main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#828b96;font-style:italic"></span><span style="color:#828b96;font-style:italic">#[tauri::command(rename_all = </span><span style="color:#a6be9d">&#34;snake_case&#34;</span><span style="color:#828b96;font-style:italic">)]</span>
</span></span><span style="display:flex;"><span><span style="color:#ff636f">fn</span> <span style="color:#58a1dd">sprite_dropped</span>(<span style="color:#58a1dd">payload</span>: <span style="color:#ff636f">&amp;</span><span style="color:#ff636f">str</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#828b96;font-style:italic">// do stuff
</span></span></span><span style="display:flex;"><span><span style="color:#828b96;font-style:italic"></span>}</span></span></code></pre></div>
<p><code>sprite_dropped</code> can now be called from the typescript with the <code>invoke</code> function. The payload argument is passed in as a JSON object.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#ff636f">import</span> {<span style="color:#58a1dd">invoke</span>} <span style="color:#ff636f">from</span> <span style="color:#a6be9d">&#34;@tauri-apps/api/tauri&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#58a1dd">invoke</span>(<span style="color:#a6be9d">&#39;sprite_dropped&#39;</span>, {<span style="color:#58a1dd">payload</span>: <span style="color:#ff636f">JSON.stringify</span>(<span style="color:#58a1dd">event</span>.<span style="color:#58a1dd">payload</span>)})</span></span></code></pre></div>
<p>Back in our Rust code we can use <code>serde_json</code> to deserialize our JSON string into a vector of strings.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#58a1dd">serde_json</span>::<span style="color:#58a1dd">from_str</span>(<span style="color:#58a1dd">payload</span>).<span style="color:#58a1dd">expect</span>(<span style="color:#a6be9d">&#34;Error parsing JSON&#34;</span>);</span></span></code></pre></div>
<p>Then we can use the <a href="https://crates.io/crates/image"><code>image</code></a> crate to load all the images into a vector.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ff636f">let</span> <span style="color:#ff636f">mut</span> <span style="color:#58a1dd">imgs</span>: <span style="color:#58a1dd">Vec</span><span style="color:#ff636f">&lt;</span><span style="color:#58a1dd">DynamicImage</span><span style="color:#ff636f">&gt;</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">Vec</span>::<span style="color:#58a1dd">new</span>();
</span></span><span style="display:flex;"><span><span style="color:#ff636f">for</span> <span style="color:#58a1dd">file</span> <span style="color:#ff636f">in</span> <span style="color:#58a1dd">file_names</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#58a1dd">imgs</span>.<span style="color:#58a1dd">push</span>(<span style="color:#58a1dd">image</span>::<span style="color:#58a1dd">open</span>(<span style="color:#58a1dd">file</span>).<span style="color:#58a1dd">unwrap</span>())
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>We can create an <code>ImageBuffer</code> to hold the data for our output image, its height will be the same as the height of a single
frame, and its width can be calculated by multiplying the width of a single frame by the amount of frames.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ff636f">let</span> <span style="color:#ff636f">mut</span> <span style="color:#58a1dd">out_buffer</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">image</span>::<span style="color:#58a1dd">ImageBuffer</span>::<span style="color:#58a1dd">new</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#58a1dd">imgs</span>[<span style="color:#a6be9d">0</span>].<span style="color:#58a1dd">width</span>() <span style="color:#ff636f">*</span> <span style="color:#58a1dd">imgs</span>.<span style="color:#58a1dd">len</span>() <span style="color:#ff636f">as</span> <span style="color:#ff636f">u32</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#58a1dd">imgs</span>[<span style="color:#a6be9d">0</span>].<span style="color:#58a1dd">height</span>());</span></span></code></pre></div>
<p>And then clear the buffer with transparent pixels.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ff636f">for</span> (<span style="color:#58a1dd">_</span>, <span style="color:#58a1dd">_</span>, <span style="color:#58a1dd">pixel</span>) <span style="color:#ff636f">in</span> <span style="color:#58a1dd">out_buffer</span>.<span style="color:#58a1dd">enumerate_pixels_mut</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff636f">*</span><span style="color:#58a1dd">pixel</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">image</span>::<span style="color:#58a1dd">Rgba</span>([<span style="color:#a6be9d">0</span>, <span style="color:#a6be9d">0</span>, <span style="color:#a6be9d">0</span>, <span style="color:#a6be9d">0</span>]);
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Now I just want to place the input images into the buffer side by side in a single strip.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ff636f">for</span> (<span style="color:#58a1dd">i</span>, <span style="color:#58a1dd">img</span>) <span style="color:#ff636f">in</span> <span style="color:#58a1dd">imgs</span>.<span style="color:#58a1dd">into_iter</span>().<span style="color:#58a1dd">enumerate</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#58a1dd">image</span>::<span style="color:#58a1dd">imageops</span>::<span style="color:#58a1dd">overlay</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#ff636f">&amp;</span><span style="color:#ff636f">mut</span> <span style="color:#58a1dd">out_buffer</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff636f">&amp;</span><span style="color:#58a1dd">img</span>, 
</span></span><span style="display:flex;"><span>        (<span style="color:#58a1dd">in_img_width</span> <span style="color:#ff636f">*</span> <span style="color:#58a1dd">i</span> <span style="color:#ff636f">as</span> <span style="color:#ff636f">u32</span>) <span style="color:#ff636f">as</span> <span style="color:#ff636f">i64</span>, 
</span></span><span style="display:flex;"><span>        <span style="color:#a6be9d">0</span>);
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Here&rsquo;s the code I put together to clean up the file name. It is supposed to remove numbers from the end of the file
name, and I am about 80 percent sure that it does exactly what I want it to do.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ff636f">let</span> <span style="color:#58a1dd">out_name</span> <span style="color:#ff636f">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff636f">let</span> <span style="color:#58a1dd">file_name</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">file_names</span>[<span style="color:#a6be9d">0</span>].<span style="color:#58a1dd">clone</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#ff636f">let</span> <span style="color:#58a1dd">file_name</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">file_name</span>.<span style="color:#58a1dd">as_str</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#ff636f">let</span> <span style="color:#58a1dd">file_name</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">file_name</span>
</span></span><span style="display:flex;"><span>        .<span style="color:#58a1dd">rsplit</span>(<span style="color:#a6be9d">&#39;.&#39;</span>).<span style="color:#58a1dd">collect</span>::<span style="color:#ff636f">&lt;</span><span style="color:#58a1dd">Vec</span><span style="color:#ff636f">&lt;</span><span style="color:#58a1dd">_</span><span style="color:#ff636f">&gt;&gt;</span>()[<span style="color:#a6be9d">1</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#ff636f">let</span> <span style="color:#58a1dd">file_name</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">file_name</span>
</span></span><span style="display:flex;"><span>        .<span style="color:#58a1dd">trim_end_matches</span>(<span style="color:#ff636f">|</span><span style="color:#58a1dd">c</span>: <span style="color:#ff636f">char</span><span style="color:#ff636f">|</span> <span style="color:#58a1dd">c</span>.<span style="color:#58a1dd">is_ascii_digit</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#ff636f">let</span> <span style="color:#58a1dd">file_name</span> <span style="color:#ff636f">=</span> <span style="color:#58a1dd">format!</span>(<span style="color:#a6be9d">&#34;</span><span style="color:#a6be9d">{}</span><span style="color:#a6be9d">.png&#34;</span>, <span style="color:#58a1dd">file_name</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#58a1dd">file_name</span>
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div>
<p>Then I just have to save it.</p>






<div class="highlight"><pre tabindex="0" style="color:#1d2432;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#58a1dd">out_buffer</span>.<span style="color:#58a1dd">save</span>(<span style="color:#58a1dd">out_name</span>).<span style="color:#58a1dd">unwrap</span>();</span></span></code></pre></div>
<p>And I can now very quickly make sprite sheets.</p>
<p>
<img src="sprite-app-demo.gif" alt="A demo of file drag and drop with the file output">
</p>
<p>Here&rsquo;s the <a href="https://github.com/novelalex/quick-sprite-sheet">GitHub</a> page.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
